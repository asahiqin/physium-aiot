<import name="item" src="../../components/item"></import>
<template>
  <div class="page">
    <scroll scroll-y="true" class="content-{{ device_type }}" onscroll="change_appbar">
      <text class="appbar-home-title">Physium</text>
      <item value="元素周期表" @touch="gotoElementsTable"></item>
      <item value="物理常数表" @touch="gotoPhysics"></item>
      <item value="计算相对分子质量" @touch="gotoGetCompound"></item>
      <item value="关于" @touch="gotoInfoPage"></item>
      <div style="width: 100%; height: 20px"></div>
    </scroll>
    <div class="appBar-{{ device_type }}">
      <div></div>
      <div style="flex-direction: column">
        <text class="appbar-time-{{ screen_type }}">{{ time }}</text>
        <text class="appbar-title-{{ screen_type }} dynamic-title" style="opacity: {{ opacity }}">
          Physium
        </text>
      </div>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import storage from "@system.storage"
export default {
  private: {
    loading: "",
    elements_button: true,
    width: "",
    device_type: "",
    time: "",
    screen_type: "",
    opacity: 0
  },
  onShow() {
    this.loading = ""
    this.elements_button = true
    var rotate = ""
    this.update_time()
    storage.get({
      key: "rotate",
      default: "off",
      success: this.rotate_change,
      fail: function (data, code) {
        console.log(`handling fail, code = ${code}`)
      }
    })
    storage.get({
      key: "version",
      success: this.handle_version,
      fail: function (data, code) {
        console.log(`handling fail, code = ${code}`)
      }
    })
    storage.get({
      key: "elements_rotate",
      success: this.handle_rotate,
      fail: function (data, code) {
        console.log(`handling fail, code = ${code}`)
      }
    })
  },
  handle_rotate(data) {
    var value = true
    if (data == "off") {
      value = false
    }
    this.$app.$def.chemistry.elements_rotate = value
  },
  rotate_change(data) {
    var value = false
    if (data == "on") {
      value = true
    }

    this.$app.$def.chemistry.rotate = value
  },
  onInit() {
    var first_use = ""

    this.screen_type = this.$app.$def.device.screen_type
    this.device_type = this.$app.$def.device.device
    this.update_time()
    console.log(this.$app.$def.device.device)
    setInterval(this.update_time, 10000)
  },
  update_time() {
    const time = new Date()
    this.time =
      time.getHours().toString().padStart(2, "0") +
      ":" +
      time.getMinutes().toString().padStart(2, "0")
  },
  handle_version(data) {
    console.log(data)
    if (data == "") {
      router.replace({
        uri: "pages/intro/readme"
      })
    } else {
      if (data != "v1.0.0-stable") {
        router.replace({
          uri: "pages/intro/update"
        })
      }
    }
  },
  back() {
    router.back()
  },
  gotoElementsTable() {
    this.loading = "正在加载,请稍后"
    if (this.elements_button) {
      this.elements_button = false
      if (this.$app.$def.chemistry.rotate) {
        router.push({
          uri: "pages/chemistry/index_rotate"
        })
      } else {
        router.push({
          uri: "pages/chemistry/index"
        })
      }
    }
  },
  gotoInfoPage() {
    router.push({
      uri: "pages/info"
    })
  },
  gotoPhysics() {
    router.push({
      uri: "pages/physics/index"
    })
  },
  gotoGetCompound() {
    router.push({
      uri: "pages/chemistry/get_compound"
    })
  },
  change_appbar(e) {
    if (e.scrollY <= 40) {
      this.opacity = 0
    } else {
      this.opacity = 1
    }
  }
}
</script>

<style lang="scss">
@use "../../material/base.scss";
@use "../../material/app_bar.scss";
@use "../../material/divider.scss";
@use "../../material/card.scss";
.icon {
  object-fit: contain;
  height: 50px;
  width: 50px;
}
.dynamic-title {
  transition: opacity ease-in-out 200ms;
}
</style>
