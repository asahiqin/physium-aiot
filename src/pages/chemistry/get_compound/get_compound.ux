<import name="input-method" src="../../../InputMethod/InputMethod.ux"></import>
<template>
  <div class="info-page">
    <scroll scroll-y="true" class="content-{{ device }}">
      <div style="width: 100%; height: 10px"></div>
      <div class="card" @click="changeState">
        <text class="text">{{ textValue }}_</text>
        <text class="text">点击切换键盘</text>
      </div>
      <div class="card">
        <text class="text" style="font-size: 20px">
          {{ output }}
        </text>
        <div class="card__actions">
          <input class="button" type="button" value="计算" @click="calc" />
        </div>
      </div>
    </scroll>
    <input-method
      hide="{{ hide }}"
      keyboardtype="{{ keyboardtype }}"
      maxlength="5"
      vibratemode="{{ vibratemode }}"
      screentype="{{ screentype }}"
      @visibility-change="onVisibilityChange"
      @key-down="onKeyDown"
      @delete="onDelete"
      @complete="onComplete"
    ></input-method>
    <div class="appBar-{{ device }}" style="">
      <img
        src="/common/back.png"
        class="back-button"
        @click="back"
      />
      <text>计算</text>
      <div></div>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import {getCompound, isErrorResult} from "../../../elements/elements.js"
console.log("[PHYSIUM]", getCompound("A"))
export default {
  private: {
    textValue: "",
    output: "",
    hide: true,
    keyboardtype: "QWERTY", //QWERTY, T9
    screentype: "", //pill-shaped, rect, circle
    elements: "",
    mass: "",
    screen_type: "",
    device: ""
  },
  back() {
    router.back()
  },
  onInit() {
    this.screen_type = this.$app.$def.device.screen_type
    this.device = this.$app.$def.device.device
    if (this.screen_type == "rect") {
      this.screentype = "rect"
    } else {
      this.screentype = "pill-shaped"
    }
  },
  onVisibilityChange(evt) {
    console.log("显示状态变更:" + JSON.stringify(evt))
  },
  onKeyDown(evt) {
    // this.textValue += evt.detail.content;
    console.log("按下按键:" + JSON.stringify(evt))
  },
  onDelete() {
    this.textValue = this.textValue.slice(0, -1)
    console.log("删除字符")
  },
  changeState() {
    this.hide = !this.hide
  },
  onComplete(evt) {
    this.textValue += evt.detail.content
    console.log("返回字符:" + JSON.stringify(evt))
  },
  calc() {
    const result = getCompound(this.textValue)
    if (isErrorResult(result)) {
      this.output = "请检查输入"
    } else {
      this.output = "质量:" + result.mass
    }
  }
}
</script>

<style lang="scss">
@import "../../../material/divider.scss";
@import "../../../material/base.scss";
@import "../../../material/app_bar.scss";
@import "../../../material/card.scss";
.info-page {
  flex-direction: column;
  align-items: flex-start;
  background-color: #141218;
}
</style>
